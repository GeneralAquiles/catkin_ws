// Generated by gencpp from file topomapping/probability_element.msg
// DO NOT EDIT!


#ifndef TOPOMAPPING_MESSAGE_PROBABILITY_ELEMENT_H
#define TOPOMAPPING_MESSAGE_PROBABILITY_ELEMENT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace topomapping
{
template <class ContainerAllocator>
struct probability_element_
{
  typedef probability_element_<ContainerAllocator> Type;

  probability_element_()
    : name()
    , prob(0.0)  {
    }
  probability_element_(const ContainerAllocator& _alloc)
    : name(_alloc)
    , prob(0.0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _name_type;
  _name_type name;

   typedef double _prob_type;
  _prob_type prob;





  typedef boost::shared_ptr< ::topomapping::probability_element_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::topomapping::probability_element_<ContainerAllocator> const> ConstPtr;

}; // struct probability_element_

typedef ::topomapping::probability_element_<std::allocator<void> > probability_element;

typedef boost::shared_ptr< ::topomapping::probability_element > probability_elementPtr;
typedef boost::shared_ptr< ::topomapping::probability_element const> probability_elementConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::topomapping::probability_element_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::topomapping::probability_element_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::topomapping::probability_element_<ContainerAllocator1> & lhs, const ::topomapping::probability_element_<ContainerAllocator2> & rhs)
{
  return lhs.name == rhs.name &&
    lhs.prob == rhs.prob;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::topomapping::probability_element_<ContainerAllocator1> & lhs, const ::topomapping::probability_element_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace topomapping

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::topomapping::probability_element_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::topomapping::probability_element_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::topomapping::probability_element_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::topomapping::probability_element_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::topomapping::probability_element_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::topomapping::probability_element_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::topomapping::probability_element_<ContainerAllocator> >
{
  static const char* value()
  {
    return "916a46374b9c700aab897fae5ce97305";
  }

  static const char* value(const ::topomapping::probability_element_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x916a46374b9c700aULL;
  static const uint64_t static_value2 = 0xab897fae5ce97305ULL;
};

template<class ContainerAllocator>
struct DataType< ::topomapping::probability_element_<ContainerAllocator> >
{
  static const char* value()
  {
    return "topomapping/probability_element";
  }

  static const char* value(const ::topomapping::probability_element_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::topomapping::probability_element_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#Standard metadata for higher-level flow data types\n"
"string name\n"
"float64  prob\n"
;
  }

  static const char* value(const ::topomapping::probability_element_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::topomapping::probability_element_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.name);
      stream.next(m.prob);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct probability_element_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::topomapping::probability_element_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::topomapping::probability_element_<ContainerAllocator>& v)
  {
    s << indent << "name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.name);
    s << indent << "prob: ";
    Printer<double>::stream(s, indent + "  ", v.prob);
  }
};

} // namespace message_operations
} // namespace ros

#endif // TOPOMAPPING_MESSAGE_PROBABILITY_ELEMENT_H
