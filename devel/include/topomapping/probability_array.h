// Generated by gencpp from file topomapping/probability_array.msg
// DO NOT EDIT!


#ifndef TOPOMAPPING_MESSAGE_PROBABILITY_ARRAY_H
#define TOPOMAPPING_MESSAGE_PROBABILITY_ARRAY_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <topomapping/probability_element.h>

namespace topomapping
{
template <class ContainerAllocator>
struct probability_array_
{
  typedef probability_array_<ContainerAllocator> Type;

  probability_array_()
    : header()
    , stamp()
    , items()  {
    }
  probability_array_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , stamp()
    , items(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef ros::Time _stamp_type;
  _stamp_type stamp;

   typedef std::vector< ::topomapping::probability_element_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::topomapping::probability_element_<ContainerAllocator> >::other >  _items_type;
  _items_type items;





  typedef boost::shared_ptr< ::topomapping::probability_array_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::topomapping::probability_array_<ContainerAllocator> const> ConstPtr;

}; // struct probability_array_

typedef ::topomapping::probability_array_<std::allocator<void> > probability_array;

typedef boost::shared_ptr< ::topomapping::probability_array > probability_arrayPtr;
typedef boost::shared_ptr< ::topomapping::probability_array const> probability_arrayConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::topomapping::probability_array_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::topomapping::probability_array_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::topomapping::probability_array_<ContainerAllocator1> & lhs, const ::topomapping::probability_array_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.stamp == rhs.stamp &&
    lhs.items == rhs.items;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::topomapping::probability_array_<ContainerAllocator1> & lhs, const ::topomapping::probability_array_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace topomapping

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::topomapping::probability_array_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::topomapping::probability_array_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::topomapping::probability_array_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::topomapping::probability_array_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::topomapping::probability_array_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::topomapping::probability_array_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::topomapping::probability_array_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d7eef3967fccdc2e28dbf74447871695";
  }

  static const char* value(const ::topomapping::probability_array_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd7eef3967fccdc2eULL;
  static const uint64_t static_value2 = 0x28dbf74447871695ULL;
};

template<class ContainerAllocator>
struct DataType< ::topomapping::probability_array_<ContainerAllocator> >
{
  static const char* value()
  {
    return "topomapping/probability_array";
  }

  static const char* value(const ::topomapping::probability_array_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::topomapping::probability_array_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"time stamp\n"
"probability_element[] items\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: topomapping/probability_element\n"
"#Standard metadata for higher-level flow data types\n"
"string name\n"
"float64  prob\n"
;
  }

  static const char* value(const ::topomapping::probability_array_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::topomapping::probability_array_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.stamp);
      stream.next(m.items);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct probability_array_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::topomapping::probability_array_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::topomapping::probability_array_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "stamp: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.stamp);
    s << indent << "items[]" << std::endl;
    for (size_t i = 0; i < v.items.size(); ++i)
    {
      s << indent << "  items[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::topomapping::probability_element_<ContainerAllocator> >::stream(s, indent + "    ", v.items[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // TOPOMAPPING_MESSAGE_PROBABILITY_ARRAY_H
